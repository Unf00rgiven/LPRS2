#! /usr/bin/env python
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

import avrwaf
from avrwaf import build_context, after_cmd

import os
import fnmatch
import shutil
import datetime
import glob

import waflib

###############################################################################

APPNAME = 'LPRS2_Arduino_Disassembly_2'

top = '.'

###############################################################################

ARDUINO_PATH = [
	'~/.local/opt/arduino/arduino-1.8.13/',
	'C:/Program Files (x86)/Arduino/'
]

def prerequisites(ctx):
	# Install Arduino IDE.
	pass

def options(opt):
	opt.load('c cxx')
	opt.add_option(
		'--app',
		dest = 'app',
		default = None,
		help = 'App to be uploaded to MCU'
	)

def configure(cfg):
	# Config.
	cfg.env.MCU = 'atmega328p'
	cfg.env.FREQ = 16e6
	
	cfg.env.AVR_PATH = [
		os.path.join(p, 'hardware/tools/avr/bin/')
		for p in ARDUINO_PATH
	]
	cfg.env.AVR_PATH.append('/usr/bin')
	
	cfg.env.PROGRAMMER = 'arduino'
	#cfg.env.PROGRAMMER_PORT = 'COM4'
	
	# Tools.
	cfg.load('avr-gcc', tooldir = avrwaf.location)
	cfg.load('avrdude', tooldir = avrwaf.location)
	
	# Flags.
	mcu_flag = '-mmcu={}'.format(cfg.env.MCU)
	opt_flag = '-O1'
	f = [
		mcu_flag,
		'-DF_CPU={}UL'.format(int(cfg.env.FREQ)),
		#opt_flag,
		'-g',
		'-Wall'
	]
	cfg.env.CFLAGS += f
	cfg.env.LINKFLAGS += [mcu_flag, opt_flag, '-lm']
	

def build(bld):
	name = 'main'
	bld.program(
		target = name + '.elf',
		features = 'avr-gcc',
		cflags = ['-O1'],
		source = ['lib.c', 'uart_stdio.c', name + '.c']
	)
	bld(
		rule = '"${OBJDUMP}" -S "${SRC}" > "${TGT[0]}"',
		target = name + '.asm',
		source = name + '.elf'
	)

@after_cmd(build)
@build_context
def upload(ctx):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	if ctx.options.app:
		ctx(
			#features = 'avrdude_upload',
			source = ctx.options.app + '.hex'
		)

@build_context
def read_fuses(ctx):
	'''Read fuses from MCU'''
	ctx(features = 'avrdude_read_fuses')


###############################################################################

def recursive_glob(pattern, directory = '.'):
	for root, dirs, files in os.walk(directory, followlinks = True):
		for f in files:
			if fnmatch.fnmatch(f, pattern):
				yield os.path.join(root, f)
		for d in dirs:
			if fnmatch.fnmatch(d + '/', pattern):
				yield os.path.join(root, d)

def collect_git_ignored_files():
	for gitignore in recursive_glob('.gitignore'):
		with open(gitignore) as f:
			base = os.path.dirname(gitignore)
			
			for pattern in f.readlines():
				pattern = pattern[:-1]
				for f in recursive_glob(pattern, base):
					yield f

###############################################################################

def distclean(ctx):
	for fn in collect_git_ignored_files():
		if os.path.isdir(fn):
			shutil.rmtree(fn)
		else:
			os.remove(fn)

def dist(ctx):
	now = datetime.datetime.now()
	time_stamp = '{:d}-{:02d}-{:02d}-{:02d}-{:02d}-{:02d}'.format(
		now.year,
		now.month,
		now.day,
		now.hour,
		now.minute,
		now.second
	)
	ctx.arch_name = '../{}-{}.zip'.format(APPNAME, time_stamp)
	ctx.algo = 'zip'
	ctx.base_name = APPNAME
	# Also pack git.
	waflib.Node.exclude_regs = waflib.Node.exclude_regs.replace(
'''
**/.git
**/.git/**
**/.gitignore''', '')
	# Ignore waf's stuff.
	waflib.Node.exclude_regs += '\n**/.waf*'
	
###############################################################################
